#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

from grako.parsing import graken, Parser
from grako.util import re, RE_FLAGS, generic_main  # noqa


__version__ = (2016, 7, 7, 23, 45, 53, 3)

__all__ = [
    'CalcParser',
    'CalcSemantics',
    'main'
]

KEYWORDS = set([])


class CalcParser(Parser):
    def __init__(self,
                 whitespace=None,
                 nameguard=None,
                 comments_re=None,
                 eol_comments_re=None,
                 ignorecase=None,
                 left_recursion=True,
                 keywords=KEYWORDS,
                 namechars='',
                 **kwargs):
        super(CalcParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            keywords=keywords,
            namechars=namechars,
            **kwargs
        )

    @graken()
    def _start_(self):
        self._expression_()
        self._check_eof()

    @graken()
    def _expression_(self):
        self._term_()
        self.name_last_node('head')

        def block2():
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('+')
                    with self._option():
                        self._token('-')
                    self._error('expecting one of: + -')
            self._term_()
        self._closure(block2)
        self.name_last_node('tail')

        self.ast._define(
            ['head', 'tail'],
            []
        )

    @graken()
    def _term_(self):
        self._power_()
        self.name_last_node('head')

        def block2():
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('*')
                    with self._option():
                        self._token('/')
                    self._error('expecting one of: * /')
            self._power_()
        self._closure(block2)
        self.name_last_node('tail')

        self.ast._define(
            ['head', 'tail'],
            []
        )

    @graken()
    def _power_(self):
        self._factor_()
        self.name_last_node('head')

        def block2():
            self._token('^')
            self._factor_()
        self._closure(block2)
        self.name_last_node('tail')

        self.ast._define(
            ['head', 'tail'],
            []
        )

    @graken()
    def _factor_(self):
        with self._choice():
            with self._option():
                self._token('(')
                self._expression_()
                self.name_last_node('@')
                self._token(')')
            with self._option():
                self._negative_()
            with self._option():
                self._number_()
            self._error('no available options')

    @graken()
    def _negative_(self):
        self._token('-')
        self._expression_()
        self.name_last_node('@')

    @graken()
    def _number_(self):
        self._pattern(r'[-+]?\d+(\.\d+)?([Ee]-?\d+)?')


class CalcSemantics(object):
    def start(self, ast):
        return ast

    def expression(self, ast):
        return ast

    def term(self, ast):
        return ast

    def power(self, ast):
        return ast

    def factor(self, ast):
        return ast

    def negative(self, ast):
        return ast

    def number(self, ast):
        return ast


def main(
        filename,
        startrule,
        trace=False,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=True,
        **kwargs):

    with open(filename) as f:
        text = f.read()
    whitespace = whitespace or None
    parser = CalcParser(parseinfo=False)
    ast = parser.parse(
        text,
        startrule,
        filename=filename,
        trace=trace,
        whitespace=whitespace,
        nameguard=nameguard,
        ignorecase=ignorecase,
        **kwargs)
    return ast

if __name__ == '__main__':
    import json
    ast = generic_main(main, CalcParser, name='Calc')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()
